##
一覧ページを作成する時はindexというアクション名を使用することが一般的

############################################################################################
１：ターミナルでrails generate controllerコマンドを用いて、
・コントローラ名が「posts」
・アクション名が「index」
となるように、コントローラとそれに対応するビューを生成してください。

コマンドで生成された、
①ルーティング
②コントローラ
③ビュー
を確認しましょう。

２：まずは、ルーティングを確認しましょう。
「config/routes.rb」を開いて、
get "posts/index" => "posts#index"
というルーティングが追加されていることを確認してください。

３：コントローラを確認しましょう。
.../controllers/posts_controller.rb
「app/controllers/posts_controller.rb」を開いて、
indexアクションを持ったpostsコントローラが作成されていることを確認してください。

③ビューを確認しましょう。
.../posts/index.html.erb
「app/views/posts/index.html.erb」を開いて、ビューファイルが作成されていることを確認してください
#####################################################################################################################

#htmlのままではデータベースにアクセスできないので、変数を用いて代入する

#index.html.erbのようなerbというファイルでは<% %>で囲むことで、
#HTMLファイルの中にRubyのコードを記述することができます。「erb」とは「Embedded Ruby（埋め込みRuby）」の略です。

#埋め込むRubyコードをブラウザに表示したい場合には、以下の図のように
#<% %>ではなく<%= %>を用います。

###############################################################################################################

投稿が増えたときに投稿の数だけ変数と HTML を書かなくてはならないので
①それぞれの変数を1つの配列にまとめる
②配列の中身を each 文で1つずつ取り出す

#<% posts.each do|post|%>
#    <div class="posts-index-item">
#      <%= post%>
#    </div>
#  <%end %>

#########################################################################################################

ここまでは変数をビューファイル内で定義してきたが、 Rails ではビューではなく、アクションで定義することが一般的

ビューで使う変数はアクション内で定義するようにしましょう。 
「def index」と「end」の間で変数を定義することで、その変数をindex.html.erb内で使用することができます。

通常、アクションで定義した変数をビューで使用することはできません。
しかし、変数名を「@」から始めることでこの変数は特殊な変数となり、ビューファイルでも使用することができます。

#[ルーティング]
    ↓
    ↓
#[postコントローラー　]

class PostsController < ApplicationController
    def index
      @posts=[
        "今日からProgateでRailsの勉強するよー！",
        "投稿一覧ページ作成中！"
      ]
    end
  end

  　↓
  　↓

#[ビュー]

########################################################################################################

配列としてデータを用意して、それを表示することはできたので、
ここからはデータベースに保存したり、取り出したりする方法を学んでいく

データベースは下の図のような表、「テーブル」で管理する。横の行が１つ１つの投稿データになっています。
また、縦の列のことを「カラム」、1行ずつのデータのことを「レコード」と呼びます。

テーブルを作成する手順
１：データベースに変更を指示するファイルを作成する
２：データベースに変更を反映する

###############################################################################################################

マイグレーションファイルと呼ばれる、データベースに変更を指示するためのファイルを作成しましょう。
postsテーブルを作成するマイグレーションファイルは「rails g model Post content:text」というコマンドで作成することができます。
textは「長い文字列」を意味しており、contentカラムにどのようなデータが入るかを意味しています。

postsテーブル
content（カラム名）
今日からプログラミング...（text）

1:ターミナルにて
tweet_app $ rails g model Post content:text
↓
マイグレーションファイルが作成される

2:ターミナルにて
rails db:migrate
↓
データベースが作成された。content 以外にもid, create_at, updated_atという3つのカラムが自動で作られる。

############################################################################################################

テーブルを操作するためには、モデルと呼ばれる特殊なクラスを用いる。
「rails g model」コマンドによって、Postモデルが定義されたファイル「post.rb」が、app/modelsフォルダの中に既に作成されています。
ファイルの中には、右の図のようにApplicationRecordクラスを継承する
Postクラスが定義されています。
このようにApplicationRecordを継承したクラスをモデルと呼びます。

「post.rb」内
class Post < ApplicationRecord
end

########################################################################################################

ターミナル上で「rails console」と入力し実行（Enter）することで、コンソールを起動することができます。コンソールを起動した状態で、「1+1」を実行すると、その実行結果が表示されます。
また、「quit」を実行すると、コンソールを終了することができます。

tweet_app $ rails console
Loading development environment (Rails 5.0.3)
[1] pry(main)> 1+1
=> 2
[2] pry(main)> text="Hello"
=> "Hello"
[3] pry(main)> text+"World"
=> "HelloWorld"
[4] pry(main)> quit
tweet_app $

###################################################################################################################

posts テーブルにデータを追加するには
① new メソッドで Post モデルのインスタンスを作成
② posts テーブルに保存

「rails console」を使って、Postモデル（Postクラス）からPostインスタンスを作成する。
インスタンスを作成するにはnewメソッドを使います。
作成したPostインスタンスをpostsテーブルに保存するには、saveメソッドを使います
使うことができるのはPostモデルがApplicationRecordを継承しているためです。

tweet_app $ rails console
[1] pry(main)> post1=Post.new(content: "今日からProgateでRailsの勉強するよー！")
[2] pry(main)> post.save ←ポストインスタンスをテーブルに保存
[6] pry(main)> quit　←これ忘れないでね

##################################################################################################################

postsテーブルに保存されているデータを取り出していく。
ターミナルにて「post=Post.first」とすることで、 posts テーブルにある最初のデータを取得できる。
続けて「post.content」とすることで「Post.first」で取得したデータから投稿内容を取得することができる。
（最初の投稿内容、contentカラムの値）

tweet_app $ rails console
[1] pry(main)> post=Post.first
[2] pry(main)> post.content
[3] pry(main)> quit

################################################################################################################

次は posts テーブルの全てのデータを取り出す方法について.

テーブルに保存されている全てのデータを取得するには、「Post.all」を使う.
「Post.all」では、テーブルにある全てのデータが配列で取得できる.
配列から要素を取り出すにはPost.all [0] のように、インデックス番号で1つの要素を特定する。
Post.all[0] で取得したデータは、Post.first で取得したときと同じ形のデータなので、 Post.all[0].content とすることで、
投稿内容を取得することができる

[rails consoleのまとめ]
データ作成（new,save.....）
データ取得（Post.all,post.contnet....）


######################################################################################################################
posts テーブルから取得した投稿データをビューに表示していこう。

postsコントローラのindexアクション内の@postsに、Post.allで取得したデータを代入しましょう。
ビューでは@postsに代入されている配列データをeach文で1つずつ変数postに代入し、投稿内容を繰り返し表示させていきましょう。

#########################################################################################################################
共通のレイアウトをまとめたい！
Railsでは、「views/layouts/application.html.erb」に共通のHTMLを書いておくことができます。
初期状態でも、<head>タグや<body>タグなどの共通部分はこちらに書かれています。
ここにヘッダーを追加し、どのページでも共通のヘッダーが表示されるようにしましょう。

「views/layouts/application.html.erb」には<%= yield %>というコードがあります。
top.html.erbなどの各ビューファイルは、この<%= yield %>の部分に代入され、application.html.erbの一部としてブラウザに表示される

################################################################################################################################

link_toメソッド
<a>タグを作成できる。 link_to メソッドは Ruby のコードなので、「<%=%>」で囲むことに注意。
第一引数に表示する文字を、第二引数に URLを書くことでリンクが作成される。

<%=link_to("TweetApp","/")  %>
<%=link_to("TweetAppとは","/about")%>

